"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginRenderer = void 0;

var _ctor = _interopRequireDefault(require("xe-utils/ctor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-enable no-unused-vars */
var defaultLineColors = ['#C23531', '#2F4554', '#006699', '#D48265', '#FFDB5C', '#91C7AE', '#BDA29A', '#797B7F'];

function createProgressBarVNs(h, params, renderOptList) {
  var row = params.row,
      column = params.column;
  var cellValue = row[column.property];

  if (!_ctor["default"].isArray(cellValue)) {
    cellValue = [cellValue];
  }

  return renderOptList.map(function (renderOpts, index) {
    var _renderOpts$props = renderOpts.props,
        props = _renderOpts$props === void 0 ? {} : _renderOpts$props;
    var margin = props.margin,
        lineWidth = props.lineWidth,
        lineColor = props.lineColor,
        lineBgColor = props.lineBgColor;
    var progressValue = Math.min(100, _ctor["default"].toNumber(cellValue[index]));
    var barMargin = _ctor["default"].isNumber(margin) ? "".concat(margin, "px") : margin;
    var barHeight = _ctor["default"].isNumber(lineWidth) ? "".concat(lineWidth, "px") : lineWidth;
    var labelPosition;

    if (progressValue < 30) {
      labelPosition = 'outer';
    } else if (progressValue > 70) {
      labelPosition = 'inner';
    }

    return h('span', {
      "class": ['vxe-renderer--progress-bar', _defineProperty({}, "label--".concat(labelPosition), labelPosition)],
      style: {
        margin: barMargin,
        height: barHeight,
        lineHeight: barHeight,
        backgroundColor: lineBgColor
      }
    }, [h('span', {
      "class": 'vxe-renderer--progress-bar-chart',
      style: {
        width: "".concat(progressValue, "%"),
        backgroundColor: lineColor || defaultLineColors[index]
      }
    }), h('span', {
      "class": 'vxe-renderer--progress-bar-label'
    }, "".concat(progressValue, "%"))]);
  });
}

function createProgressRingVNs(h, params, renderOptList) {
  var row = params.row,
      column = params.column;
  var cellValue = row[column.property];

  if (!_ctor["default"].isArray(cellValue)) {
    cellValue = [cellValue];
  }

  return renderOptList.map(function (renderOpts, index) {
    var _renderOpts$props2 = renderOpts.props,
        props = _renderOpts$props2 === void 0 ? {} : _renderOpts$props2;
    var width = props.width,
        height = props.height,
        margin = props.margin,
        labelColor = props.labelColor,
        lineColor = props.lineColor,
        lineBgColor = props.lineBgColor,
        hollowColor = props.hollowColor;
    var progressValue = Math.min(100, _ctor["default"].toNumber(cellValue[index]));
    var barMargin = _ctor["default"].isNumber(margin) ? "".concat(margin, "px") : margin;
    var halfRing = 0;
    var maskRing = 0;

    if (progressValue) {
      if (progressValue > 50) {
        halfRing = _ctor["default"].floor((progressValue - 50) * 3.6);
        maskRing = 180;
      } else {
        maskRing = _ctor["default"].floor(progressValue * 3.6);
      }
    }

    return h('span', {
      "class": 'vxe-renderer--progress-ring',
      style: {
        margin: barMargin,
        width: _ctor["default"].isNumber(width) ? "".concat(width, "px") : width,
        height: _ctor["default"].isNumber(height) ? "".concat(height, "px") : height,
        backgroundColor: lineBgColor
      }
    }, [h('span', {
      "class": 'vxe-renderer--progress-ring-piece-prev',
      style: {
        backgroundColor: lineColor || defaultLineColors[index]
      }
    }), h('span', {
      "class": ['vxe-renderer--progress-ring-piece-naxt', {
        'is--half': halfRing
      }],
      style: {
        backgroundColor: lineColor || defaultLineColors[index],
        transform: "rotate(".concat(halfRing, "deg)")
      }
    }), h('span', {
      "class": 'vxe-renderer--progress-ring-mask',
      style: {
        backgroundColor: lineBgColor,
        transform: "rotate(".concat(maskRing, "deg)")
      }
    }), h('span', {
      "class": 'vxe-renderer--progress-ring-hollow',
      style: {
        backgroundColor: hollowColor
      }
    }), h('span', {
      "class": 'vxe-renderer--progress-ring-label',
      style: {
        color: labelColor
      }
    }, "".concat(progressValue, "%"))]);
  });
}
/**
 * 渲染函数
 */


var renderMap = {
  ProgressBar: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      return createProgressBarVNs(h, params, [renderOpts]);
    }
  },
  ProgressBars: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      return createProgressBarVNs(h, params, renderOpts.children || []);
    }
  },
  ProgressRing: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      return createProgressRingVNs(h, params, [renderOpts]);
    }
  },
  ProgressRings: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      return createProgressRingVNs(h, params, renderOpts.children || []);
    }
  }
};
/**
 * 基于 vxe-table 表格的增强插件，提供一些常用的渲染器
 */

var VXETablePluginRenderer = {
  install: function install(xtable) {
    xtable.renderer.mixin(renderMap);
  }
};
exports.VXETablePluginRenderer = VXETablePluginRenderer;

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginRenderer);
}

var _default = VXETablePluginRenderer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,

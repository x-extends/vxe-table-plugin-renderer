"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginRenderer = void 0;

var _ctor = _interopRequireDefault(require("xe-utils/ctor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-enable no-unused-vars */

/**
 * 渲染函数
 */
var renderMap = {
  ProgressBar: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      var row = params.row,
          column = params.column;
      var _renderOpts$props = renderOpts.props,
          props = _renderOpts$props === void 0 ? {} : _renderOpts$props;
      var lineWidth = props.lineWidth,
          lineColor = props.lineColor,
          lineBgColor = props.lineBgColor;
      var cellValue = Math.min(100, _ctor["default"].toNumber(row[column.property]));
      var labelPosition;

      if (cellValue < 30) {
        labelPosition = 'outer';
      } else if (cellValue > 70) {
        labelPosition = 'inner';
      }

      return [h('span', {
        "class": ['vxe-renderer--progress-bar', _defineProperty({}, "label--".concat(labelPosition), labelPosition)],
        style: {
          backgroundColor: lineBgColor
        }
      }, [h('span', {
        "class": 'vxe-renderer--progress-bar-chart',
        style: {
          width: "".concat(cellValue, "%"),
          height: _ctor["default"].isNumber(lineWidth) ? "".concat(lineWidth) : lineWidth,
          backgroundColor: lineColor
        }
      }), h('span', {
        "class": 'vxe-renderer--progress-bar-label'
      }, "".concat(cellValue, "%"))])];
    }
  },
  ProgressRing: {
    renderDefault: function renderDefault(h, renderOpts, params) {
      var row = params.row,
          column = params.column;
      var _renderOpts$props2 = renderOpts.props,
          props = _renderOpts$props2 === void 0 ? {} : _renderOpts$props2;
      var width = props.width,
          height = props.height,
          labelColor = props.labelColor,
          lineColor = props.lineColor,
          lineBgColor = props.lineBgColor,
          hollowColor = props.hollowColor;
      var cellValue = Math.min(100, _ctor["default"].toNumber(row[column.property]));
      var halfRing = 0;
      var maskRing = 0;

      if (cellValue) {
        if (cellValue > 50) {
          halfRing = _ctor["default"].floor((cellValue - 50) * 3.6);
          maskRing = 180;
        } else {
          maskRing = _ctor["default"].floor(cellValue * 3.6);
        }
      }

      return [h('span', {
        "class": 'vxe-renderer--progress-ring',
        style: {
          width: _ctor["default"].isNumber(width) ? "".concat(width, "px") : width,
          height: _ctor["default"].isNumber(height) ? "".concat(height, "px") : height,
          backgroundColor: lineBgColor
        }
      }, [h('span', {
        "class": 'vxe-renderer--progress-ring-piece-prev',
        style: {
          backgroundColor: lineColor
        }
      }), h('span', {
        "class": ['vxe-renderer--progress-ring-piece-naxt', {
          'is--half': halfRing
        }],
        style: {
          backgroundColor: lineColor,
          transform: "rotate(".concat(halfRing, "deg)")
        }
      }), h('span', {
        "class": 'vxe-renderer--progress-ring-mask',
        style: {
          backgroundColor: lineBgColor,
          transform: "rotate(".concat(maskRing, "deg)")
        }
      }), h('span', {
        "class": 'vxe-renderer--progress-ring-hollow',
        style: {
          backgroundColor: hollowColor
        }
      }), h('span', {
        "class": 'vxe-renderer--progress-ring-label',
        style: {
          color: labelColor
        }
      }, "".concat(cellValue, "%"))])];
    }
  }
};
/**
 * 基于 vxe-table 表格的增强插件，提供一些常用的渲染器
 */

var VXETablePluginRenderer = {
  install: function install(xtable) {
    xtable.renderer.mixin(renderMap);
  }
};
exports.VXETablePluginRenderer = VXETablePluginRenderer;

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginRenderer);
}

var _default = VXETablePluginRenderer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
